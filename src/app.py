# -*- coding: utf-8 -*-
"""[DATA101] Final Project Dash App.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rVqVT5kreDCjcUwyaTO7f1iiUtK6IcGw

# DATA101 Final Project
Borro, Domingo, Paden, Roque
"""

from dash import Dash, dcc, html, Input, Output
import pandas as pd
import plotly.express as px
import geopandas as gpd
import ast
import dash_daq as daq

df = pd.read_csv('DATA101_Combined_Dataset_Cleaned.csv')
gdf = gpd.read_file('us-state-boundaries.geojson')

def safe_parse_list(val):
    try:
        parsed = ast.literal_eval(val)
        return parsed if isinstance(parsed, list) else []
    except (ValueError, SyntaxError):
        return []

# parse the lists
df['industry_name'] = df['industry_name'].apply(lambda x: safe_parse_list(x) if isinstance(x, str) else [])
df['skill_name'] = df['skill_name'].apply(lambda x: safe_parse_list(x) if isinstance(x, str) else [])

# Explode columns
df_industry = df.explode('industry_name')
df_skill = df.explode('skill_name')

app = Dash(__name__)
server = app.server

# Theme Colors
light_theme = {
    'bg': '#f9f9f9',
    'card': 'white',
    'text': '#111111',
    'plot_bg': '#f0f0f0',
    'paper_bg': 'white'
}

dark_theme = {
    'bg': '#1e1e1e',
    'card': '#2c2c2c',
    'text': 'white',
    'plot_bg': '#333333',
    'paper_bg': '#2c2c2c'
}

# Button Options
chart_buttons = [
    {'label': 'Industries', 'value': 'industry_name'},
    {'label': 'Skills', 'value': 'skill_name'},
    {'label': 'Companies', 'value': 'company_name'}
]

salary_buttons = [
    {'label': 'Median', 'value': 'med_salary'},
    {'label': 'Maximum', 'value': 'max_salary'},
    {'label': 'Minimum', 'value': 'min_salary'}
]

# App Layout
app.layout = html.Div([
    html.H1("USA Salary Analysis Dashboard", id='title', className='title', style={'textAlign': 'center', 'marginBottom': '30px'}),
    html.H3("Based on 2023-2024 LinkedIn Job Postings", id='subtitle', className='subtitle', style={'textAlign': 'center', 'marginBottom': '30px'}),

    html.Div([
        html.Div([
            html.Label("Chart Type", className='label'),
            html.Div([
                html.Button(btn['label'], id={'type': 'chart-btn', 'index': btn['value']},
                            n_clicks=0, className='button')
                for btn in chart_buttons
            ], className='button-group')
        ], className='card', id='chart-card'),

        html.Div([
            html.Label("State Filter", className='label'),
            dcc.Dropdown(
                id='state-dropdown',
                options=[{'label': state_name, 'value': state} for state, state_name in df[['state', 'state_name']].drop_duplicates().values],
                value=None,
                placeholder="Select a state",
                className='dropdown',
                style={'width': '100%'}
            )
        ], className='card', id='state-card', style={'width': '30%'}),

        html.Div([
            html.Label("Salary Type", className='label'),
            html.Div([
                html.Button(btn['label'], id={'type': 'salary-btn', 'index': btn['value']},
                            n_clicks=0, className='button')
                for btn in salary_buttons
            ], className='button-group')
        ], className='card', id='salary-card'),

        html.Div([
            html.Label("Dark Mode", className='label'),
            daq.BooleanSwitch(id='theme-toggle', on=True, color="#2c3e50", style={'width': '10%'})
        ], className='card', id='theme-card', style={
                      'width': '20%',
                      'display': 'flex',
                      'flexDirection': 'column',
                      'alignItems': 'center'
                  }),
    ], className='control-row'),

    html.Div([
        html.Div([dcc.Graph(id='bar-chart')], className='card graph-card'),
        html.Div([dcc.Graph(id='histogram')], className='card graph-card')
    ], className='graph-row'),

    html.Div([dcc.Graph(id='choropleth-map')], className='card', id='map-card')
], id='main-container', className='light-theme')

# Callback
@app.callback(
    Output('bar-chart', 'figure'),
    Output('histogram', 'figure'),
    Output('choropleth-map', 'figure'),
    Output('main-container', 'className'),
    Output({'type': 'chart-btn', 'index': ALL}, 'className'),
    Output({'type': 'salary-btn', 'index': ALL}, 'className'),
    Input({'type': 'chart-btn', 'index': ALL}, 'n_clicks'),
    Input({'type': 'salary-btn', 'index': ALL}, 'n_clicks'),
    Input('state-dropdown', 'value'),
    Input('theme-toggle', 'on'),
    State({'type': 'chart-btn', 'index': ALL}, 'id'),
    State({'type': 'salary-btn', 'index': ALL}, 'id'),
)
def update_dashboard(chart_clicks, salary_clicks, selected_state, theme_on, chart_ids, salary_ids):
    # Active Selection
    chart_type = chart_ids[chart_clicks.index(max(chart_clicks))]['index']
    salary_type = salary_ids[salary_clicks.index(max(salary_clicks))]['index']

    # Theme
    theme = dark_theme if theme_on else light_theme
    theme_class = 'dark-theme' if theme_on else 'light-theme'

    # Data Filtering
    filtered_df = df[df['state'] == selected_state] if selected_state else df
    if chart_type == 'industry_name':
        exploded_df = df_industry[df_industry['state'] == selected_state] if selected_state else df_industry
    elif chart_type == 'skill_name':
        exploded_df = df_skill[df_skill['state'] == selected_state] if selected_state else df_skill
    else:
        exploded_df = filtered_df

    top_x_df = exploded_df.groupby(chart_type)[salary_type].mean().sort_values(ascending=False).head(10).reset_index()

    # Plotly Figures
    bar_chart = px.bar(
        top_x_df, x=salary_type, y=chart_type, orientation='h',
        color=salary_type, color_continuous_scale='Blues',
        title=f'Top 10 {chart_type.replace("_", " ").title()} by Salary',
    )
    bar_chart.update_layout(plot_bgcolor=theme['plot_bg'], paper_bgcolor=theme['paper_bg'], font_color=theme['text'], yaxis={'categoryorder': 'total ascending'}, width=750)

    histogram = px.histogram(
        filtered_df, x=salary_type,
        title=f'{salary_type.replace("_", " ").title()} Distribution'
    )
    histogram.update_layout(plot_bgcolor=theme['plot_bg'], paper_bgcolor=theme['paper_bg'], font_color=theme['text'], width=750)

    # Choropleth
    choropleth_df = df.groupby('state')[salary_type].mean()
    merged_gdf = gdf.set_index('stusab').join(choropleth_df)

    choropleth_map = px.choropleth(
        merged_gdf,
        geojson=merged_gdf.geometry,
        locations=merged_gdf.index,
        color=salary_type,
        hover_name=merged_gdf.index,
        color_continuous_scale='Purples',
        title=f'U.S. States by {salary_type.replace("_", " ").title()}'
    )
    choropleth_map.update_geos(scope='usa', projection_type='albers usa')
    choropleth_map.update_layout(
        geo=dict(bgcolor=theme['paper_bg']),
        plot_bgcolor=theme['plot_bg'], paper_bgcolor=theme['paper_bg'], font_color=theme['text']
    )

    # Active Button Styling
    chart_classes = ['button active' if id['index'] == chart_type else 'button' for id in chart_ids]
    salary_classes = ['button active' if id['index'] == salary_type else 'button' for id in salary_ids]

    return bar_chart, histogram, choropleth_map, theme_class, chart_classes, salary_classes

# Custom CSS
app.index_string = '''
<!DOCTYPE html>
<html>
    <head>
        {%metas%}
        <title>USA Salary Dashboard</title>
        {%favicon%}
        {%css%}
        <style>
            body { margin: 0; font-family: Arial, sans-serif; }

            .control-row {
                display: flex;
                flex-wrap: wrap;
                justify-content: center;
                gap: 20px;
                margin-bottom: 30px;
                padding: 10px;
            }

            .card {
                border-radius: 10px;
                box-shadow: 0 4px 8px rgba(0,0,0,0.1);
                padding: 20px;
                transition: background-color 0.3s ease;
                background-color: white;
                color: black;
            }

            .dark-theme .card {
                background-color: #2c2c2c;
                color: white;
            }

            .dark-theme .Select-control {
                background-color: #2c3e50 !important;
                color: white !important;
            }

            .dark-theme .Select-menu-outer {
                background-color: #2c3e50 !important;
                color: white !important;
            }

            .dark-theme .Select-value-label {
                color: white !important;
            }

            .dark-theme .Select-option.is-focused {
                background-color: #34495e !important;
            }

            .label {
                font-weight: bold;
                margin-bottom: 10px;
                display: block;
            }

            .button-group {
                display: flex;
                gap: 10px;
                flex-wrap: wrap;
            }

            .button {
                padding: 8px 15px;
                background-color: #e0e0e0;
                border: none;
                border-radius: 5px;
                cursor: pointer;
                transition: background-color 0.3s ease, transform 0.2s ease;
            }

            .button:hover {
                background-color: #ccc;
                transform: scale(1.02);
            }

            .active {
                background-color: #2c3e50 !important;
                color: white !important;
            }

            .graph-row {
                display: flex;
                flex-wrap: wrap;
                gap: 20px;
                justify-content: center;
                margin-bottom: 30px;
            }

            .graph-card {
                flex: 1 1 500px;
            }

            .light-theme {
                background-color: #f9f9f9;
                color: #111111;
            }

            .dark-theme {
                background-color: #1e1e1e;
                color: white;
            }
        </style>
    </head>
    <body>
        {%app_entry%}
        <footer>
            {%config%}
            {%scripts%}
            {%renderer%}
        </footer>
    </body>
</html>
'''

if __name__ == '__main__':
    app.run(debug=True)

