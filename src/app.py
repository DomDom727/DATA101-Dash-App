# -*- coding: utf-8 -*-
"""[DATA101] Final Project Dash App.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rVqVT5kreDCjcUwyaTO7f1iiUtK6IcGw

# DATA101 Final Project
Borro, Domingo, Paden, Roque
"""

from dash import Dash, dcc, html, Input, Output
import pandas as pd
import plotly.express as px
import geopandas as gpd
import ast
import dash_daq as daq

df = pd.read_csv('DATA101_Combined_Dataset_Cleaned.csv')
gdf = gpd.read_file('us-state-boundaries.geojson')

def safe_parse_list(val):
    try:
        parsed = ast.literal_eval(val)
        return parsed if isinstance(parsed, list) else []
    except (ValueError, SyntaxError):
        return []

# parse the lists
df['industry_name'] = df['industry_name'].apply(lambda x: safe_parse_list(x) if isinstance(x, str) else [])
df['skill_name'] = df['skill_name'].apply(lambda x: safe_parse_list(x) if isinstance(x, str) else [])

# Explode columns
df_industry = df.explode('industry_name')
df_skill = df.explode('skill_name')

app = Dash(__name__)
server = app.server

# Theme Colors
light_theme = {
    'bg': '#f9f9f9',
    'card': 'white',
    'text': '#111111',
    'plot_bg': '#f0f0f0',
    'paper_bg': 'white'
}

dark_theme = {
    'bg': '#1e1e1e',
    'card': '#2c2c2c',
    'text': 'white',
    'plot_bg': '#333333',
    'paper_bg': '#2c2c2c'
}

# Layout
app.layout = html.Div([
    html.H1("USA Salary Analysis Dashboard", id='title', style={'textAlign': 'center', 'marginBottom': '30px'}),
    html.H3("Based on 2023 LinkedIn Job Postings", id='subtitle', style={'textAlign': 'center', 'marginBottom': '30px'}),

    html.Div([
        html.Div([
            html.Label("Chart Type", style={'fontWeight': 'bold'}),
            dcc.Dropdown(
                id='chart-type-dropdown',
                options=[
                    {'label': 'Industries', 'value': 'industry_name'},
                    {'label': 'Skills', 'value': 'skill_name'},
                    {'label': 'Companies', 'value': 'company_name'},
                    {'label': 'Job Titles', 'value': 'title'}
                ],
                value='industry_name',
                style={'width': '100%'}
            )
        ], className='card', id='chart-card', style={'width': '400px'}),

        html.Div([
            html.Label("State Filter", style={'fontWeight': 'bold'}),
            dcc.Dropdown(
                id='state-dropdown',
                options=[{'label': state, 'value': state} for state in df['state'].unique()],
                value=None,
                placeholder="Select a state",
                style={'width': '100%'}
            )
        ], className='card', id='state-card', style={'width': '400px'}),

        html.Div([
            html.Label("Salary Type", style={'fontWeight': 'bold'}),
            dcc.Dropdown(
                id='salary-type-dropdown',
                options=[
                    {'label': 'Median Salary', 'value': 'med_salary'},
                    {'label': 'Maximum Salary', 'value': 'max_salary'},
                    {'label': 'Minimum Salary', 'value': 'min_salary'}
                ],
                value='med_salary',
                style={'width': '100%'}
            )
        ], className='card', id='salary-card', style={'width': '400px'}),

        html.Div([
            html.Div([
                html.Label("Dark Mode", style={'fontWeight': 'bold', 'marginRight': '10px'}),
                daq.BooleanSwitch(
                    id='theme-toggle',
                    on=True,
                    color="#119DFF"
                )
            ], style={'display': 'flex', 'alignItems': 'center'})
        ], className='card', id='theme-card', style={'width': '400px', 'paddingTop': '15px'})
    ], style={'display': 'flex', 'gap': '30px', 'justifyContent': 'center', 'marginBottom': '30px'}),

    html.Div([
        html.Div([
            dcc.Graph(id='bar-chart')
        ], className='card', id='bar-card', style={'flex': '1'}),

        html.Div([
            dcc.Graph(id='histogram')
        ], className='card', id='hist-card', style={'flex': '1'})
    ], style={'display': 'flex', 'gap': '20px', 'marginBottom': '30px'}),

    html.Div([
        dcc.Graph(id='choropleth-map')
    ], className='card', id='map-card', style={'marginBottom': '30px'})
], id='main-container', className='dark-theme', style={
    'padding': '20px',
    'backgroundColor': light_theme['bg'],
    'fontFamily': 'Arial, sans-serif',
    'color': light_theme['text']
})

# CSS styling
app.index_string = '''
<!DOCTYPE html>
<html>
    <head>
        {%metas%}
        <title>Salary Dashboard</title>
        {%favicon%}
        {%css%}
        <style>
            .card {
                border-radius: 10px;
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
                padding: 20px;
            }
            .dark-theme .Select-control {
                background-color: #2c3e50 !important;
                color: white !important;
            }
            .dark-theme .Select-menu-outer {
                background-color: #2c3e50 !important;
                color: white !important;
            }
            .dark-theme .Select-value-label {
                color: white !important;
            }
            .dark-theme .Select-option.is-focused {
                background-color: #34495e !important;
            }
        </style>
    </head>
    <body>
        {%app_entry%}
        <footer>
            {%config%}
            {%scripts%}
            {%renderer%}
        </footer>
    </body>
</html>
'''

# Callback to update charts and theme
@app.callback(
    [Output('bar-chart', 'figure'),
     Output('histogram', 'figure'),
     Output('choropleth-map', 'figure'),
     Output('main-container', 'style'),
     Output('chart-card', 'style'),
     Output('state-card', 'style'),
     Output('salary-card', 'style'),
     Output('theme-card', 'style'),
     Output('bar-card', 'style'),
     Output('hist-card', 'style'),
     Output('map-card', 'style'),
     Output('title', 'style'),
     Output('subtitle', 'style')],
    [Input('chart-type-dropdown', 'value'),
     Input('state-dropdown', 'value'),
     Input('salary-type-dropdown', 'value'),
     Input('theme-toggle', 'on')]
)

def update_dashboard(chart_type, selected_state, salary_type, theme_value):
    theme = dark_theme if theme_value else light_theme

    # Filter data
    if selected_state:
        filtered_df = df[df['state'] == selected_state]
        if chart_type == 'industry_name':
            exploded_df = df_industry[df_industry['state'] == selected_state]
        elif chart_type == 'skill_name':
            exploded_df = df_skill[df_skill['state'] == selected_state]
        else:
            exploded_df = df[df['state'] == selected_state]
    else:
        filtered_df = df
        if chart_type == 'industry_name':
            exploded_df = df_industry
        elif chart_type == 'skill_name':
            exploded_df = df_skill
        else:
            exploded_df = df


    top_x_df = exploded_df.groupby(chart_type)[salary_type].mean().sort_values(ascending=False).head(10).reset_index()
    color_scale_map = {
    'industry_name': 'Blues',
    'skill_name': 'Greens',
    'company_name': 'Oranges',
    'title': 'Reds'
    }
    label_map = {
        'industry_name': 'Industries',
        'skill_name': 'Skills',
        'company_name': 'Companies',
        'title': 'Job Titles'
    }.get(chart_type, chart_type.replace("_", " ").title())

    salary_label_map = {
        'med_salary': 'Median',
        'max_salary': 'Maximum',
        'min_salary': 'Minimum'
    }
    salary_label = salary_label_map.get(salary_type, salary_type.title())

    # Bar Chart
    bar_chart = px.bar(top_x_df,
                        x=salary_type,
                        y=chart_type,
                        orientation='h',
                        color=salary_type,
                        color_continuous_scale=color_scale_map.get(chart_type, 'Viridis'),
                        title=f'Top 10 {chart_type.replace("_", " ").capitalize()} by Avg. Salary')
    bar_chart.update_layout(plot_bgcolor=theme['plot_bg'],
                            paper_bgcolor=theme['paper_bg'],
                            yaxis={'categoryorder': 'total ascending'},
                            font_color=theme['text'],
                            xaxis_title='Average Yearly Salary (USD)',
                            yaxis_title=label_map,
                            title=f"Top 10 {label_map} by Average {salary_label} Salary")

    # Histogram
    histogram = px.histogram(filtered_df, x=salary_type,
                             title=f'Distribution of {salary_label} Salary')
    histogram.update_traces(marker=dict(color='rgba(100, 230, 230, 0.8)',
                                        line=dict(color='black', width=1)))
    histogram.update_layout(plot_bgcolor=theme['plot_bg'],
                            paper_bgcolor=theme['paper_bg'],
                            font_color=theme['text'],
                            xaxis_title=f'{salary_label} Yearly Salary (USD)',
                            yaxis_title='')

    # Choropleth Map
    merged_gdf = gdf.set_index('stusab').join(
        df.groupby('state')[salary_type].mean(), on='stusab'
    )
    choropleth_map = px.choropleth(
        merged_gdf,
        geojson=merged_gdf.geometry,
        locations=merged_gdf.index,
        color=salary_type,
        hover_name=merged_gdf.index,
        color_continuous_scale="purples",
        title=f"U.S. States by Average {salary_label} Salary"
    )
    choropleth_map.update_geos(scope='usa',
                               projection_type="albers usa",
                               showland=True)
    choropleth_map.update_layout(geo=dict(bgcolor=theme['paper_bg']),
                                 plot_bgcolor=theme['plot_bg'],
                                 paper_bgcolor=theme['paper_bg'],
                                 font_color=theme['text'])

    # Update style dicts for theme
    container_style = {'padding': '20px',
                       'backgroundColor': theme['bg'],
                       'fontFamily': 'Arial, sans-serif',
                       'color': theme['text']}
    card_style = {'width': '400px',
                  'backgroundColor': theme['card'],
                  'color': theme['text'],
                  'borderRadius': '10px',
                  'boxShadow': '0 4px 8px rgba(0, 0, 0, 0.1)',
                  'padding': '20px'}
    graph_card_style = {'backgroundColor': theme['card'],
                        'color': theme['text'],
                        'borderRadius': '10px',
                        'boxShadow': '0 4px 8px rgba(0, 0, 0, 0.1)',
                        'padding': '20px', 'flex': '1'}
    title_style = {'textAlign': 'center',
                   'marginBottom': '30px',
                   'color': theme['text']}
    subtitle_style = {'textAlign': 'center',
                      'marginBottom': '30px',
                      'color': theme['text']}

    return bar_chart, histogram, choropleth_map, container_style, card_style, card_style, card_style, card_style, graph_card_style, graph_card_style, graph_card_style, title_style, subtitle_style

if __name__ == '__main__':
    app.run(debug=True)

